# Generated from WhileLang.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,155,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,
        0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,
        3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,
        8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,
        1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
        1,20,1,20,1,21,1,21,5,21,117,8,21,10,21,12,21,120,9,21,1,22,4,22,
        123,8,22,11,22,12,22,124,1,23,1,23,5,23,129,8,23,10,23,12,23,132,
        9,23,1,23,1,23,1,24,1,24,1,24,1,24,5,24,140,8,24,10,24,12,24,143,
        9,24,1,24,1,24,1,24,1,24,1,25,4,25,150,8,25,11,25,12,25,151,1,25,
        1,25,1,141,0,26,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,1,0,5,3,0,65,90,95,95,97,122,4,0,48,57,
        65,90,95,95,97,122,1,0,48,57,3,0,10,10,13,13,34,34,3,0,9,10,13,13,
        32,32,159,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,1,53,1,0,0,0,3,57,1,0,0,0,5,64,1,0,0,0,7,67,1,
        0,0,0,9,72,1,0,0,0,11,78,1,0,0,0,13,80,1,0,0,0,15,82,1,0,0,0,17,
        84,1,0,0,0,19,86,1,0,0,0,21,88,1,0,0,0,23,90,1,0,0,0,25,92,1,0,0,
        0,27,94,1,0,0,0,29,97,1,0,0,0,31,100,1,0,0,0,33,103,1,0,0,0,35,106,
        1,0,0,0,37,108,1,0,0,0,39,110,1,0,0,0,41,112,1,0,0,0,43,114,1,0,
        0,0,45,122,1,0,0,0,47,126,1,0,0,0,49,135,1,0,0,0,51,149,1,0,0,0,
        53,54,5,105,0,0,54,55,5,110,0,0,55,56,5,116,0,0,56,2,1,0,0,0,57,
        58,5,115,0,0,58,59,5,116,0,0,59,60,5,114,0,0,60,61,5,105,0,0,61,
        62,5,110,0,0,62,63,5,103,0,0,63,4,1,0,0,0,64,65,5,105,0,0,65,66,
        5,102,0,0,66,6,1,0,0,0,67,68,5,101,0,0,68,69,5,108,0,0,69,70,5,115,
        0,0,70,71,5,101,0,0,71,8,1,0,0,0,72,73,5,119,0,0,73,74,5,104,0,0,
        74,75,5,105,0,0,75,76,5,108,0,0,76,77,5,101,0,0,77,10,1,0,0,0,78,
        79,5,40,0,0,79,12,1,0,0,0,80,81,5,41,0,0,81,14,1,0,0,0,82,83,5,123,
        0,0,83,16,1,0,0,0,84,85,5,125,0,0,85,18,1,0,0,0,86,87,5,59,0,0,87,
        20,1,0,0,0,88,89,5,61,0,0,89,22,1,0,0,0,90,91,5,60,0,0,91,24,1,0,
        0,0,92,93,5,62,0,0,93,26,1,0,0,0,94,95,5,62,0,0,95,96,5,61,0,0,96,
        28,1,0,0,0,97,98,5,60,0,0,98,99,5,61,0,0,99,30,1,0,0,0,100,101,5,
        61,0,0,101,102,5,61,0,0,102,32,1,0,0,0,103,104,5,33,0,0,104,105,
        5,61,0,0,105,34,1,0,0,0,106,107,5,43,0,0,107,36,1,0,0,0,108,109,
        5,45,0,0,109,38,1,0,0,0,110,111,5,42,0,0,111,40,1,0,0,0,112,113,
        5,47,0,0,113,42,1,0,0,0,114,118,7,0,0,0,115,117,7,1,0,0,116,115,
        1,0,0,0,117,120,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,44,1,
        0,0,0,120,118,1,0,0,0,121,123,7,2,0,0,122,121,1,0,0,0,123,124,1,
        0,0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,46,1,0,0,0,126,130,5,34,
        0,0,127,129,8,3,0,0,128,127,1,0,0,0,129,132,1,0,0,0,130,128,1,0,
        0,0,130,131,1,0,0,0,131,133,1,0,0,0,132,130,1,0,0,0,133,134,5,34,
        0,0,134,48,1,0,0,0,135,136,5,47,0,0,136,137,5,47,0,0,137,141,1,0,
        0,0,138,140,9,0,0,0,139,138,1,0,0,0,140,143,1,0,0,0,141,142,1,0,
        0,0,141,139,1,0,0,0,142,144,1,0,0,0,143,141,1,0,0,0,144,145,5,10,
        0,0,145,146,1,0,0,0,146,147,6,24,0,0,147,50,1,0,0,0,148,150,7,4,
        0,0,149,148,1,0,0,0,150,151,1,0,0,0,151,149,1,0,0,0,151,152,1,0,
        0,0,152,153,1,0,0,0,153,154,6,25,0,0,154,52,1,0,0,0,6,0,118,124,
        130,141,151,1,6,0,0
    ]

class WhileLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    IF = 3
    ELSE = 4
    WHILE = 5
    LPAREN = 6
    RPAREN = 7
    LBRACE = 8
    RBRACE = 9
    SEMI = 10
    ASSIGN = 11
    LT = 12
    GT = 13
    GE = 14
    LE = 15
    EQ = 16
    NE = 17
    PLUS = 18
    MINUS = 19
    MUL = 20
    DIV = 21
    ID = 22
    NUMBER = 23
    STRING = 24
    COMMENT = 25
    WS = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'int'", "'string'", "'if'", "'else'", "'while'", "'('", "')'", 
            "'{'", "'}'", "';'", "'='", "'<'", "'>'", "'>='", "'<='", "'=='", 
            "'!='", "'+'", "'-'", "'*'", "'/'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "WHILE", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
            "SEMI", "ASSIGN", "LT", "GT", "GE", "LE", "EQ", "NE", "PLUS", 
            "MINUS", "MUL", "DIV", "ID", "NUMBER", "STRING", "COMMENT", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "IF", "ELSE", "WHILE", "LPAREN", "RPAREN", 
                  "LBRACE", "RBRACE", "SEMI", "ASSIGN", "LT", "GT", "GE", 
                  "LE", "EQ", "NE", "PLUS", "MINUS", "MUL", "DIV", "ID", 
                  "NUMBER", "STRING", "COMMENT", "WS" ]

    grammarFileName = "WhileLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None



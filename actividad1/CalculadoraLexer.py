# Generated from Calculadora.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,12,70,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,1,1,
        1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,
        9,5,9,46,8,9,10,9,12,9,49,9,9,1,10,4,10,52,8,10,11,10,12,10,53,1,
        10,1,10,4,10,58,8,10,11,10,12,10,59,3,10,62,8,10,1,11,4,11,65,8,
        11,11,11,12,11,66,1,11,1,11,0,0,12,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,1,0,4,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,74,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,1,25,1,0,0,0,3,27,1,0,0,0,5,29,1,0,0,0,7,31,1,0,0,0,
        9,33,1,0,0,0,11,35,1,0,0,0,13,37,1,0,0,0,15,39,1,0,0,0,17,41,1,0,
        0,0,19,43,1,0,0,0,21,51,1,0,0,0,23,64,1,0,0,0,25,26,5,61,0,0,26,
        2,1,0,0,0,27,28,5,59,0,0,28,4,1,0,0,0,29,30,5,45,0,0,30,6,1,0,0,
        0,31,32,5,94,0,0,32,8,1,0,0,0,33,34,5,42,0,0,34,10,1,0,0,0,35,36,
        5,47,0,0,36,12,1,0,0,0,37,38,5,43,0,0,38,14,1,0,0,0,39,40,5,40,0,
        0,40,16,1,0,0,0,41,42,5,41,0,0,42,18,1,0,0,0,43,47,7,0,0,0,44,46,
        7,1,0,0,45,44,1,0,0,0,46,49,1,0,0,0,47,45,1,0,0,0,47,48,1,0,0,0,
        48,20,1,0,0,0,49,47,1,0,0,0,50,52,7,2,0,0,51,50,1,0,0,0,52,53,1,
        0,0,0,53,51,1,0,0,0,53,54,1,0,0,0,54,61,1,0,0,0,55,57,5,46,0,0,56,
        58,7,2,0,0,57,56,1,0,0,0,58,59,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,
        0,60,62,1,0,0,0,61,55,1,0,0,0,61,62,1,0,0,0,62,22,1,0,0,0,63,65,
        7,3,0,0,64,63,1,0,0,0,65,66,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,0,
        67,68,1,0,0,0,68,69,6,11,0,0,69,24,1,0,0,0,6,0,47,53,59,61,66,1,
        6,0,0
    ]

class CalculadoraLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    ID = 10
    NUMBER = 11
    WS = 12

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "';'", "'-'", "'^'", "'*'", "'/'", "'+'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUMBER", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "ID", "NUMBER", "WS" ]

    grammarFileName = "Calculadora.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


